{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","fileName","setFileName","fileSrc","setFileSrc","fileObject","setFileObject","unit","aspect","width","height","cropped","setCropped","imageRef","blobObject","croppedImage","useEffect","render","FileReader","addEventListener","result","readAsDataURL","makeClientCrop","crop","a","getCroppedImg","image","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","log","className","id","type","aria-describedby","onChange","e","target","files","name","fileOnClick","htmlFor","Container","Row","Col","xs","md","lg","src","ruleOfThirds","onImageLoaded","onComplete","onClick","element","href","window","URL","createObjectURL","download","click","getCroppedImage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.314a226f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport {Row, Col, Container, Button } from 'react-bootstrap'\nimport { useState, useEffect } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nfunction App() {\n\n  const [ fileName, setFileName ] = useState('');\n  const [ fileSrc, setFileSrc ] = useState('');\n  const [ fileObject, setFileObject ] = useState();\n  const [ cropped, setCropped ] = useState(\n    {\n      unit: '%',\n      aspect: 16 / 16,\n      width: 50,\n      height: 50,\n    }\n  )\n  const [ croppedImage, setCroppedImage ] = useState(\n    {\n      imageRef: '',\n      blobObject: [],\n    }\n  )\n\n  useEffect(() => {\n    if(fileName !== ''){\n      const render = new FileReader();\n      render.addEventListener('load', () =>{\n          setFileSrc(render.result)\n      });\n      render.readAsDataURL(fileObject);\n    }\n  }, [fileObject])\n\n  const fileOnClick = (e) => {\n    setFileName(e.target.files[0].name);\n    setFileObject(e.target.files[0])\n  }\n\n  const onImageLoaded = (image) => {\n    croppedImage.imageRef = image;\n  };\n\n  const onCropComplete = (crop) => {\n      makeClientCrop(crop);\n  };\n\n  const onCropChange = (crop, percentCrop) => {\n    setCropped(crop);\n  };\n\n  const makeClientCrop = async (crop) => {\n      if (croppedImage.imageRef && crop.width && crop.height) {\n          const croppedImageUrl = await getCroppedImg(\n          croppedImage.imageRef,\n          crop,\n          fileName\n        );\n      }\n  }\n\n  const getCroppedImg = (image, crop, fileName) => {\n      const canvas = document.createElement('canvas');\n      const scaleX = image.naturalWidth / image.width;\n      const scaleY = image.naturalHeight / image.height;\n      canvas.width = (crop.width + 200 < 500)? crop.width + 200 : 500;\n      canvas.height = (crop.height + 200 < 500)? crop.height + 200 : 500;\n      const ctx = canvas.getContext('2d');\n\n      ctx.drawImage(\n        image,\n        crop.x * scaleX,\n        crop.y * scaleY,\n        crop.width * scaleX,\n        crop.height * scaleY,\n        0,\n        0,\n        canvas.width,\n        canvas.height\n      );\n          \n      return new Promise((resolve, reject) => {\n        canvas.toBlob(blob => {\n          if (!blob) {\n            return;\n          }\n          croppedImage.blobObject = blob;\n          console.log(blob);\n        }, 'image/jpeg',1);\n      });\n      \n    }\n  \n  const getCroppedImage = () => {\n    var element = document.createElement(\"a\");\n    console.log(croppedImage.blobObject);\n    element.href = window.URL.createObjectURL(croppedImage.blobObject);\n    element.download = fileName;\n    element.click();\n  }\n\n  return (\n    <div>\n      <div className=\"file-input\">\n        <div className=\"input-group\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\" id=\"inputGroupFileAddon01\">\n              Upload Image\n            </span>\n          </div>\n          <div className=\"custom-file\">\n            <input\n              type=\"file\"\n              className=\"custom-file-input\"\n              id=\"inputGroupFile01\"\n              aria-describedby=\"inputGroupFileAddon01\"\n              onChange = { (e) => fileOnClick(e)}\n            />\n            <label className=\"custom-file-label\" htmlFor=\"inputGroupFile01\">\n              { ( fileName ) ? fileName :'Choose file' }\n            </label>\n          </div>\n        </div>\n      </div>\n      <div className=\"seperator\"></div>\n      <Container>\n        <Row>\n        <Col xs={1} md={3} lg={3}></Col>\n          <Col xs={10} md={6} lg={6}>\n            {(fileSrc) && ( \n              <ReactCrop \n                src={fileSrc} \n                crop={cropped} \n                ruleOfThirds\n                onImageLoaded={e => { onImageLoaded(e) } }\n                onComplete={e => { onCropComplete(e) } }\n                onChange={e => { onCropChange(e) }}\n              />\n              )}\n            {(fileSrc) && ( \n              <div className =\"MainContainer\">\n                <div className=\"TextViewStyle\">\n                    <p className=\"TextStyle\" onClick={ () => \n                getCroppedImage() }>Download Cropped Image</p>\n                </div>  \n              </div>\n              )}\n          </Col>\n          <Col xs={1} md={3} lg={3}></Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}